{"version":3,"file":"static/js/235.7184b03f.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,4CAEHC,EAAiB,mCAAG,oGACRF,EAAAA,EAAAA,IAAA,6BAAgCC,IADxB,cACzBE,EADyB,yBAExBA,EAASC,KAAKC,QAAQC,KAAI,YAC/B,MAAO,CACLC,GAFgD,EAAhBA,GAGhCC,MAHgD,EAAZA,MAKvC,KAP8B,2CAAH,qDAUjBC,EAAW,mCAAG,WAAMC,GAAN,uFACFV,EAAAA,EAAAA,IAAA,iBAAoBU,GAApB,OAA4BT,EAA5B,oBADE,cACnBE,EADmB,yBAElBA,EAASC,MAFS,2CAAH,sDAKXO,EAAO,mCAAG,WAAMD,GAAN,uFACEV,EAAAA,EAAAA,IAAA,iBACXU,EADW,mBACKT,EADL,oBADF,cACfE,EADe,yBAIdA,EAASC,KAAKQ,KAAKN,KAAI,YAC5B,MAAO,CACLO,KAFqE,EAAxCA,KAG7BC,UAHqE,EAAlCA,UAInCC,aAJqE,EAAvBA,aAK9CR,GALqE,EAATA,GAO/D,KAXoB,2CAAH,sDAcPS,EAAU,mCAAG,WAAMN,GAAN,uFACDV,EAAAA,EAAAA,IAAA,iBACXU,EADW,mBACKT,EADL,2BADC,cAClBE,EADkB,yBAIjBA,EAASC,KAAKC,QAAQC,KAAI,YAC/B,MAAO,CACLW,OAF0D,EAA1BA,OAGhCC,QAH0D,EAAlBA,QAIxCX,GAJ0D,EAATA,GAMpD,KAVuB,2CAAH,sDAaVY,EAAS,mCAAG,WAAMT,GAAN,uFACAV,EAAAA,EAAAA,IAAA,uBACLC,EADK,kBACYS,EADZ,YADA,cACjBP,EADiB,yBAIhBA,EAASC,KAAKC,QAAQC,KAAI,YAC/B,MAAO,CACLC,GAFgD,EAAhBA,GAGhCC,MAHgD,EAAZA,MAKvC,KATsB,2CAAH,qD,oHC7Cf,SAASY,EAAT,GAAmE,IAAD,IAA9CC,QAAWR,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,aACrD,OACE,2BACE,gBACEO,MAAO,IACPC,IACER,EAAY,0CAC2BA,GACnC,+CAENS,IAAI,MAEN,uBAAIX,KACJ,4CAAkBC,OAGvB,CCbD,IA0BA,EA1Ba,WACX,OAAwBW,EAAAA,EAAAA,UAAS,MAAjC,eAAOb,EAAP,KAAac,EAAb,KACMC,GAAYC,EAAAA,EAAAA,MAAZD,QAMN,OAJAE,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAYH,GAASI,KAAKL,EAC3B,GAAE,CAACC,IAECf,GAKH,8BACGA,EAAKoB,OAAS,GACb,+BACGpB,QADH,IACGA,OADH,EACGA,EAAMN,KAAI,SAACe,EAASd,GAAV,OACT,SAACa,EAAD,CAAmBC,QAASA,GAAbd,EADN,OAKb,qCAZG,IAgBV,C","sources":["FechApi/FechApiFilms.jsx","components/CastCard/CastCard.jsx","pages/Ð¡ast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '?api_key=39081659ccbd37aa67b527f3397a07ba';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day${API_KEY}`);\n  return response.data.results.map(({ id, title }) => {\n    return {\n      id,\n      title,\n    };\n  });\n};\n\nexport const getOneMovie = async value => {\n  const response = await axios.get(`/movie/${value}${API_KEY}&language=en-US`);\n  return response.data;\n};\n\nexport const getCast = async value => {\n  const response = await axios.get(\n    `/movie/${value}/credits${API_KEY}&language=en-US`\n  );\n  return response.data.cast.map(({ name, character, profile_path, id }) => {\n    return {\n      name,\n      character,\n      profile_path,\n      id,\n    };\n  });\n};\n\nexport const getReviews = async value => {\n  const response = await axios.get(\n    `/movie/${value}/reviews${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results.map(({ author, content, id }) => {\n    return {\n      author,\n      content,\n      id,\n    };\n  });\n};\n\nexport const getMovies = async value => {\n  const response = await axios.get(\n    `/search/movie${API_KEY}&query=${value}&page=1`\n  );\n  return response.data.results.map(({ id, title }) => {\n    return {\n      id,\n      title,\n    };\n  });\n};\n","import PropTypes from 'prop-types';\n\nexport function CastCard({ oneCast: { name, character, profile_path } }) {\n  return (\n    <li>\n      <img\n        width={100}\n        src={\n          profile_path\n            ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n            : 'https://dummyimage.com/100x150/000000/a2a3ab'\n        }\n        alt=\"\"\n      />\n      <p>{name}</p>\n      <p>{`Character: ${character}`}</p>\n    </li>\n  );\n}\n\nCastCard.propTypes = {\n  oneCast: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    character: PropTypes.string.isRequired,\n    profile_path: PropTypes.string,\n  }),\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from 'FechApi/FechApiFilms';\nimport { CastCard } from 'components/CastCard/CastCard';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    API.getCast(movieId).then(setCast);\n  }, [movieId]);\n\n  if (!cast) {\n    return null;\n  }\n\n  return (\n    <>\n      {cast.length > 0 ? (\n        <ul>\n          {cast?.map((oneCast, id) => (\n            <CastCard key={id} oneCast={oneCast} />\n          ))}\n        </ul>\n      ) : (\n        <p>No cast</p>\n      )}\n    </>\n  );\n};\nexport default Cast;\n"],"names":["axios","API_KEY","getTrendingMovies","response","data","results","map","id","title","getOneMovie","value","getCast","cast","name","character","profile_path","getReviews","author","content","getMovies","CastCard","oneCast","width","src","alt","useState","setCast","movieId","useParams","useEffect","API","then","length"],"sourceRoot":""}